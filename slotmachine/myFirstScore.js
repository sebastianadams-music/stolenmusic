var makeNotesOld = makeNotes.concat(harmGliss(60, 3, 5), beam, harmGliss(62, 3, 5), barline, harmGliss(36, 6, 5), barline, harmGliss(36, 9, 5), beam)

            // CALL THE GENERATING FUNCTION HERE

      // var makeNotes = pieceNumberOne(14)

        //var listOfNotes = [60, 60, 60, 60, 60]
        listOfNotes = ascendingNoteRow(60, 24)
        var makeNotes = opus3(listOfNotes)

      // console.log("makenotes: " + makeNotes)
      // console.log("lengh of maketnotes: " + makeNotes.length)


            // PACKAGE THE GENERATING FUNCTION FOR THE SCORE HERE

      var scoreNotes = midi2abc(addPitch(makeNotes, - 24))
      var scoreNotesViola = midi2abc(addPitch(makeNotes, - 36))

      // var note = randomNotes(8, 8) + randomNotes(8, 4) + midi2abc([36, 48, 60, 72, 84, 96])

      var finalScore = "K: C" + "L: 1/16\n" + "V:1 name=Violin\n V:2 name=Viola clef=alto\n" 
+ "[V:1]" + scoreNotes + finalbar + "[V:2]" + scoreNotesViola + finalbar;
    var minSpacing = 1.8;
    var maxSpacing = 2.8;
    var preferredMeasuresPerLine = 4;
    var staffwidth = 900;

    

    //////// SCORE GENERATING FUNCTIONS
    function opus1(cells)
    // simple piece generated by choosing a length
    {
    let notes = []
    
      for (let i = 0; i < cells; i++)
      {
        start = getRandomInt(56, 74)
        firstPartial = getRandomInt(3, 6)
        length = getRandomInt(4, 9)
        console.log("params :" , start , firstPartial , length)
        gliss = harmGliss(start, firstPartial, length)
        console.log("gliss", gliss) 
        notes = notes.concat(gliss)
        console.log("notes", notes)
        notes = notes.concat(barline)
      }
    console.log("notes: " + notes)
    return notes

    }

    function opus2(noteArray) 
    // simple piece generated from an array of starting notes
    {
      let notes = []

      for (item in noteArray)
      {
        start = noteArray[item]
        firstPartial = getRandomInt(3, 6)
        length = getRandomInt(4, 9)
        console.log("params :" , start , firstPartial , length)
        gliss = harmGliss(start, firstPartial, length)
        console.log("gliss", gliss) 
        notes = notes.concat(gliss)
        console.log("notes", notes)
        notes = notes.concat(barline)

      }
      return notes

    }

    function opus3(noteArray) 
    // simplified opus2 by removing randomised start partial
    {
      let notes = []

      for (item in noteArray)
      {
        start = noteArray[item]
        firstPartial = 3
        length = getRandomInt(4, 9)
        console.log("params :" , start , firstPartial , length)
        gliss = harmGliss(start, firstPartial, length)
        console.log("gliss", gliss) 
        notes = notes.concat(gliss)
        console.log("notes", notes)
        notes = notes.concat(barline)

      }
      return notes

    }



    function ascendingNoteRow(origin, length){
      let notes = []
      for (let i = 0; i < length; i++)
      {
        note = origin + i
        notes = notes.concat(note)

      }
      return notes
    }